"""
@author : Hyunwoong
@when : 2019-10-22
@homepage : https://github.com/gusdnd852
"""
import math
import time

from torch import nn, optim
from torch.optim import Adam
import numpy as np

from conf import *
from models.transformer import Transformer
from epoch_timer import epoch_time
from DataSet import My_DataSet
from torch.utils.data import DataLoader


def count_parameters(model_transformer):
    return sum(p.numel() for p in model_transformer.parameters() if p.requires_grad)


def initialize_weights(m):
    if hasattr(m, 'weight') and m.weight.dim() > 1:
        nn.init.kaiming_uniform(m.weight.data)


model = Transformer(
                    d_model=d_model,
                    max_len=max_len,
                    ffn_hidden=ffn_hidden,
                    n_head=n_heads,
                    n_layers=n_layers,
                    drop_prob=drop_prob,
                    device=device).to(device)

print(f'The model has {count_parameters(model):,} trainable parameters')

# 更好的随机初始化模型参数
model.apply(initialize_weights)

# 定义梯度下降使用的算法并提供稳定器
optimizer = Adam(params=model.parameters(),
                 lr=init_lr,
                 weight_decay=weight_decay,
                 eps=adam_eps)

scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer=optimizer,
                                                 verbose=True,
                                                 factor=factor,
                                                 patience=patience)

# 定义loss function
criterion = nn.CrossEntropyLoss()


def convert_labels_dimen(labels_, eyemat):

    labels_list = []

    for i in range(labels_.size()[0]):
        val = labels_[i].item()
        labels_list.append(eyemat[val - 1])

    labels_list = torch.tensor(labels_list)
    return labels_list


def train(model_transformer, behavior_unit, dataset_loader, optimizer_t, criterion_t, clip_t):

    model_transformer.train()  # set model to training mode
    behavior_unit = behavior_unit.to(device).to(torch.float32)
    loss_arr = []
    round_ = 0
    for x, y in dataset_loader:  # iterate through the dataloader

        optimizer_t.zero_grad()  # set gradient to zero

        x = x.to(device).to(torch.float32)  # move data to device (cpu/cuda)
        pred = model_transformer(x, behavior_unit)  # forward pass (compute output)

        cross_e_loss = criterion_t(pred, y)  # compute loss
        cross_e_loss.backward()  # compute gradient (backpropagation)
        torch.nn.utils.clip_grad_norm_(model_transformer.parameters(), clip_t)
        optimizer_t.step()  # update model with optimizer
        loss_arr.append(cross_e_loss.item())
        round_ += 1
        print('step :', round((round_ / len(dataset_loader)) * 100, 2), '% , loss :', cross_e_loss.item())

    return np.mean(loss_arr)


def test(behavior_unit, dataset_loader, criterion_t):

    # 创建一个空的模型对象,加载模型参数
    model_transformer = Transformer()
    model.load_state_dict(torch.load('saved/model_final.pth'))
    model.eval()

    epoch_loss = 0
    behavior_unit = behavior_unit.to(device).to(torch.float32)
    with torch.no_grad():
        for x, y in dataset_loader:
            x = x.to(device).to(torch.float32)  # move data to device (cpu/cuda)
            pred = model_transformer(x, behavior_unit)  # forward pass (compute output)
            cross_e_loss = criterion_t(pred, y)
            epoch_loss += cross_e_loss.item()

    return epoch_loss / len(dataset_loader)


def run(total_epoch, best_loss, pattern, train_iter, test_iter):
    train_losses, test_losses = [], []

    # train
    for step in range(total_epoch):
        start_time = time.time()
        train_loss = train(model, pattern, train_iter, optimizer, criterion, clip)
        end_time = time.time()

        train_losses.append(train_loss)
        epoch_mins, epoch_secs = epoch_time(start_time, end_time)

        # 保存最好的模型参数
        if train_loss < best_loss:
            best_loss = train_loss
            torch.save(model.state_dict(), 'saved/model-{0}.pt'.format(train_loss))

        f = open('result/train_loss.txt', 'w')
        f.write(str(train_losses))
        f.close()

        print(f'Epoch: {step + 1} | Time: {epoch_mins}m {epoch_secs}s')
        print(f'\tTrain Loss: {train_loss:.3f} | Train PPL: {math.exp(train_loss):7.3f}')

    # test
    test_loss = test(pattern, test_iter, criterion)
    print(f'\tTrain Loss: {test_loss:.3f} | Train PPL: {math.exp(test_loss):7.3f}')


if __name__ == '__main__':

    #  behavior_unit的向量输入
    pattern_emb = torch.load("Data/Tensor/behavior_unit_tensor/all_pattern_tensor.pt")

    # 训练集的 features & labels 加载
    train_features = torch.load("Data/Tensor/Train/features/all_family_tensor.pt")
    train_labels = torch.load("Data/Tensor/Train/labels/tensor_labels.pt")
    test_features = torch.load("Data/Tensor/Test/features/all_family_tensor.pt")
    test_labels = torch.load("Data/Tensor/Test/labels/tensor_labels.pt")

    # train_labels的类型转换 torch.size([64]) --> torch.size([64,8])
    eye_matrix = np.eye(8).tolist()
    train_labels = convert_labels_dimen(train_labels, eye_matrix)
    test_labels = convert_labels_dimen(test_labels, eye_matrix)

    # DataSet & DataLoader 集成样本组
    dataset_train = My_DataSet(train_features, train_labels)
    train_loader = DataLoader(dataset_train, batch_size, shuffle=True, drop_last=False, pin_memory=True)
    dataset_test = My_DataSet(test_features, test_labels)
    test_loader = DataLoader(dataset_test, batch_size, shuffle=True, drop_last=False, pin_memory=True)

    # start
    run(total_epoch=epoch, best_loss=inf, pattern=pattern_emb, train_iter=train_loader, test_iter=test_loader)
