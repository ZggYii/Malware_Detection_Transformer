"""
@author : Hyunwoong
@when : 2019-12-18
@homepage : https://github.com/gusdnd852
"""
from torch import nn
from block.encoder_layer import EncoderLayer
from embed.position_embedding import PositionalEncoding


class Encoder(nn.Module):

    def __init__(self, d_model, max_len, ffn_hidden, n_head, n_layers, drop_prob, device):
        super().__init__()
        self.embed_pos = PositionalEncoding(d_model, max_len, device)

        self.max_pool = nn.MaxPool2d(kernel_size=2, stride=2)
        # ”病毒种类“ = 8
        self.net = nn.Linear(d_model // 2, 8, bias=False)
        self.softmax = nn.Softmax(dim=-1)

        self.layers = nn.ModuleList([EncoderLayer(d_model=d_model,
                                                  ffn_hidden=ffn_hidden,
                                                  n_head=n_head,
                                                  drop_prob=drop_prob)
                                     for _ in range(n_layers // 2)])

    def forward(self, x, unit_):

        # 根据序列长度维度的大小生成 “位置嵌入“
        position_x = self.embed_pos(x)

        # 行为单元嵌入输出
        for layer in self.layers:
            unit_x = layer(unit_)

        # 行为单元嵌入输出 + 位置嵌入 + 行为序列嵌入
        x = unit_x + position_x + x
        # where x-->[1,179,512] , position_x-->[64,179,512] , behavior_seq_x-->[64,179,512]
        # broadcast sum up = [64,179,512]

        for layer in self.layers:
            x = layer(x)

        x = self.max_pool(x)
        x = self.net(x)
        x = self.softmax(x)

        return x